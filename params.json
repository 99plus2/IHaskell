{"name":"IHaskell: Haskell for IPython","tagline":"A Haskell language backend for IPython interactive shell and notebook.","body":"IHaskell is an implementation of the [IPython](http://ipython.org) kernel protocol which allows you to use Haskell inside IPython frontends such as `qtconsole` and `notebook`.\r\n\r\nThe project works with the IPython shell:\r\n\r\n![IPython Console](https://raw.github.com/gibiansky/IHaskell/master/images/ihaskell-console.png)\r\n\r\nAs well as the IPython browser-based notebook interface:\r\n\r\n![IPython Notebook](https://raw.github.com/gibiansky/IHaskell/master/images/ihaskell-notebook.png)\r\n\r\nInstallation\r\n===\r\n\r\nDownload the package from the Github repository:\r\n```bash\r\ngit clone https://github.com/gibiansky/IHaskell\r\n```\r\n\r\nInstall ZeroMQ:\r\n```bash\r\nsudo apt-get install libzmq-dev # Ubuntu\r\nbrew install zeromq # Macs with Homebrew\r\n```\r\n\r\nInstall the package:\r\n```bash\r\ncd IHaskell;\r\ncabal install --only-dependencies;\r\ncabal configure;\r\ncabal build;\r\ncabal install;\r\n```\r\n\r\nCreate the IPython profile:\r\n```bash\r\nIHaskell setup\r\n```\r\n\r\nRun the notebook or console interface:\r\n```bash\r\nIHaskell notebook # Should open a browser window!\r\nIHaskell console\r\n```\r\n\r\nThere is a test notebook in the `IHaskell` directory.\r\n\r\nContributing\r\n===\r\n\r\nIHaskell is an extremely young project, and I'd love your help getting it to a stable and useful point. There's a lot to do, and if you'd like to contribute, feel free to get in touch with me via my email at andrew period gibiansky at gmail - although browsing the code should be enough to get you started, I'm more than happy to answer any questions myself.\r\n\r\nSome ideas for improvements:\r\n- Type annotations. When a statement is evaluated, the GHC API returns the names of all bound variables. It should be possible to take those names and find the types of the variables, and display them in a table via the `display_data` message. \r\n- Implementing useful directives. Currently, support for GHCi-style \":\"-initiated directives exist, but they do not do anything (and are instead just printed in green). Useful directives such as \":t\" and \":i\" and \":m [+-]\" have yet to be implemented, and adding them would be a good way to get started with the codebase.\r\n- Parsing and viewing of formats via `display_data` and HTML:\r\n    - `aeson` compatibility which displays JSON as syntax highlighted JSON code via HTML.\r\n    - Support for `repa` or `hmatrix` vectors and matrices being displayed.\r\n    - `A custom typeclass for displaying data types as HTML, similar to Show.\r\n\r\nAlso, take a look at the [developer notes](https://github.com/gibiansky/IHaskell/blob/master/README.md#developer-notes) as well - they are sparse but may be helpful.","google":"UA-40714888-2","note":"Don't delete this file! It's used internally to help with page regeneration."}